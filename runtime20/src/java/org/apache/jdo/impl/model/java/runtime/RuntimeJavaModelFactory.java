/*
 * Copyright 2005 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

package org.apache.jdo.impl.model.java.runtime;

import java.security.AccessController;
import java.security.PrivilegedAction;

import javax.jdo.spi.JDOImplHelper;
import javax.jdo.spi.JDOPermission;

import org.apache.jdo.model.ModelFatalException;
import org.apache.jdo.model.java.JavaModel;
import org.apache.jdo.model.java.JavaModelFactory;
import org.apache.jdo.impl.model.java.reflection.ReflectionJavaModelFactory;
import org.apache.jdo.util.I18NHelper;

/**
 * A reflection based JavaModelFactory implementation used at runtime. 
 * The implementation takes <code>java.lang.Class</code> and
 * <code>java.lang.reflect.Field</code> instances to get Java related
 * metadata about types and fields. This implementation caches JavaModel
 * instance sper ClassLoader.
 * <p>
 * RuntimeJavaModelFactory implements the singleton pattern; method 
 * {@link #getInstance()} provides access to the singleton factory
 * instance. This method also registers a model listener at the
 * JDOImplHelper to handle the runtime metadata as generated by the
 * enhancer. 
 * 
 * @since 1.0.1
 * @version 2.0
 */
public class RuntimeJavaModelFactory
    extends ReflectionJavaModelFactory
{    
    /** The singleton RuntimeJavaModelFactory instance. */    
    private static final RuntimeJavaModelFactory runtimeJavaModelFactory = 
        new RuntimeJavaModelFactory();

    /** I18N support */
    private final static I18NHelper msg =  
        I18NHelper.getInstance(RuntimeJavaModelFactory.class);

    /**
     * Creates a new RuntimeJavaModelFactory. This constructor should not
     * be called directly; instead, the singleton access method 
     * {@link #getInstance()} should be used.
     */
    protected RuntimeJavaModelFactory()
    {
        registerFactory();
    }
    
    /** 
     * Returns the singleton instance of RuntimeJavaModelFactory. On first
     * call it registers  a model listener at the JDOImplHelper.
     * This method checks that the caller is authorized for 
     * <code>JDOPermission("getMetadata")</code>, and if not, throws
     * <code>ModelFatalException</code> wrapping the SecurityException.
     * @return RuntimeJavaModelFactory instance
     * @exception ModelFatalException if the caller does not have the
     * getMetadata permission.
     */    
    public static RuntimeJavaModelFactory getInstance()
        throws ModelFatalException
    {
        checkPermission();
        return runtimeJavaModelFactory;
    }

    //========= Internal helper methods ==========

    /**
     * This method checks that the caller is authorized for
     * <code>JDOPermission("getMetadata")</code>, and if not, throws 
     * <code>ModelFatalException</code> wrapping the SecurityException.
     * @throws ModelFatalException if the caller does not have the
     * getMetadata permission.
     */
    protected static void checkPermission()
        throws ModelFatalException
    {
        // check whether caller has the getMetadata permission
        SecurityManager sec = System.getSecurityManager();
        if (sec != null) { 
            try {
                // throws exception if caller is not authorized
                sec.checkPermission(JDOPermission.GET_METADATA);
            }
            catch (SecurityException ex) {
                throw new ModelFatalException(
                    msg.msg("EXC_CannotGetRuntimeJavaModelFactory"), ex); // NOI18N
            }
        }
    }
    
    /** 
     * Registers this JavaModelFactory instance at the JDOImplHelper. 
     */
    protected void registerFactory()
    {
        // initialize RuntimeJavaModelFactory singleton instance
        try {
            JDOImplHelper helper = 
                (JDOImplHelper) AccessController.doPrivileged(
                    new PrivilegedAction () {
                        public Object run () {
                            return JDOImplHelper.getInstance();
                        }
                    }
                    );
            // register listener to JDOImplHelpers class registration
            RegisterClassListener crl = new RegisterClassListener(
                helper, this);
            helper.addRegisterClassListener(crl);
        }
        catch (SecurityException ex) {
            throw new ModelFatalException(
                msg.msg("EXC_CannotGetJDOImplHelper"), ex); // NOI18N
        }
    }

    /** 
     * Creates a new instance of the JavaModel implementation class.
     * <p>
     * This implementation returns a <code>RuntimeJavaModel</code> instance.
     * @return a new JavaModel instance.
     */
    protected JavaModel newJavaModelInstance(ClassLoader classLoader) {
        return new RuntimeJavaModel(classLoader, this);
    }

}
