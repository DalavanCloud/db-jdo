/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

package org.apache.jdo.impl.model.java.runtime;

import java.security.AccessController;
import java.security.PrivilegedAction;

import javax.jdo.spi.JDOImplHelper;
import javax.jdo.spi.JDOPermission;

import org.apache.jdo.model.ModelException;
import org.apache.jdo.model.ModelFatalException;
import org.apache.jdo.model.java.JavaModel;
import org.apache.jdo.model.java.JavaModelFactory;
import org.apache.jdo.model.java.JavaType;
import org.apache.jdo.model.jdo.JDOModelFactory;
import org.apache.jdo.model.jdo.JDOModel;
import org.apache.jdo.impl.model.java.BaseReflectionJavaType;
import org.apache.jdo.impl.model.java.reflection.ReflectionJavaModelFactory;
import org.apache.jdo.impl.model.jdo.caching.JDOModelFactoryImplCaching;
import org.apache.jdo.util.I18NHelper;

/**
 * A reflection based JavaModelFactory implementation used at runtime. 
 * The implementation takes <code>java.lang.Class</code> and
 * <code>java.lang.reflect.Field</code> instances to get Java related
 * metadata about types and fields. This implementation caches JavaModel
 * instance sper ClassLoader.
 * <p>
 * RuntimeJavaModelFactory implements the singleton pattern; method 
 * {@link #getInstance()} provides access to the singleton factory
 * instance. This method also registers a model listener at the
 * JDOImplHelper to handle the runtime metadata as generated by the
 * enhancer. 
 * 
 * @since 1.0.1
 * @version 1.1
 */
public class RuntimeJavaModelFactory
    extends ReflectionJavaModelFactory
{    
    /** The singleton RuntimeJavaModelFactory instance. */    
    private static final RuntimeJavaModelFactory runtimeJavaModelFactory = 
        new RuntimeJavaModelFactory();

    /** I18N support */
    private final static I18NHelper msg =  
        I18NHelper.getInstance(RuntimeJavaModelFactory.class);

    /** */
    static
    {
        // initialize RuntimeJavaModelFactory singleton instance
        try {
            JDOImplHelper helper = 
                (JDOImplHelper) AccessController.doPrivileged(
                    new PrivilegedAction () {
                        public Object run () {
                            return JDOImplHelper.getInstance();
                        }
                    }
                    );
            // register listener to JDOImplHelpers class registration
            RegisterClassListener crl = new RegisterClassListener(
                helper, runtimeJavaModelFactory);
            helper.addRegisterClassListener(crl);
        }
        catch (SecurityException ex) {
            throw new ModelFatalException(
                msg.msg("EXC_CannotGetJDOImplHelper"), ex); // NOI18N
        }
    }

    /**
     * Creates a new RuntimeJavaModelFactory. This constructor should not
     * be called directly; instead, the singleton access method 
     * {@link #getInstance()} should be used.
     */
    protected RuntimeJavaModelFactory() {}

    /** 
     * Returns the singleton instance of RuntimeJavaModelFactory. On first
     * call it registers  a model listener at the JDOImplHelper.
     * This method checks that the caller is authorized for 
     * <code>JDOPermission("getMetadata")</code>, and if not, throws
     * <code>ModelFatalException</code> wrapping the SecurityException.
     * @return RuntimeJavaModelFactory instance
     * @exception ModelFatalException if the caller does not have the
     * getMetadata permission.
     */    
    public static RuntimeJavaModelFactory getInstance()
        throws ModelFatalException
    {
        // first check whether caller has the getMetadata permission
        SecurityManager sec = System.getSecurityManager();
        if (sec != null) { 
            try {
                // throws exception if caller is not authorized
                sec.checkPermission(JDOPermission.GET_METADATA);
            }
            catch (SecurityException ex) {
                throw new ModelFatalException(
                    msg.msg("EXC_CannotGetRuntimeJavaModelFactory"), ex); // NOI18N
            }
        }

        return runtimeJavaModelFactory;
    }
    
    /**
     * Creates a new empty JavaModel instance. A factory implementation may
     * use the specified key when caching the new JavaModel instance. 
     * <p>
     * This implementation only accepts <code>java.lang.ClassLoader</code>
     * instances as key. A ModelException indicates an invalid key.
     * <p>
     * The method automatically sets the parent/child relationship for the
     * created JavaModel according to the parent/child relationship of the 
     * ClassLoader passed as key. 
     * @param key the key that may be used to cache the returned JavaModel
     * instance. 
     * @return a new JavaModel instance.
     * @exception ModelException if impossible; the key is of an
     * inappropriate type.
     */
    public JavaModel createJavaModel(Object key)
        throws ModelException
    {
        if ((key != null) && (!(key instanceof ClassLoader)))
            throw new ModelException(msg.msg("EXC_InvalidJavaModelKey", //NOI18N
                key.getClass().getName()));
        
        ClassLoader classLoader = (ClassLoader)key;
        JavaModel javaModel = new RuntimeJavaModel(classLoader, this);

        // check parent <-> child relationship
        if (classLoader != null) {
            try {
                ClassLoader parentClassLoader = classLoader.getParent();
                javaModel.setParent(getJavaModel(parentClassLoader));
            }
            catch (SecurityException ex) {
                // ignore => parentClassLoader and parent JavaModel are null
            }
        }

        // set the JDOModel property in JavaModel
        setJDOModelInternal(javaModel);

        return javaModel;
    }

    /**
     * Returns a JavaType instance for the specified type description
     * (optional operation). This method is a convenience method and a
     * short cut for <code>getJavaModel(key).getJavaType(typeName)</code>.
     * <p>
     * The RuntimeJavaModelFactory supports this short cut and accepts
     * <code>java.lang.Class</code> instances as valid arguments for this
     * method. The method throws a 
     * {@link org.apache.jdo.model.ModelFatalException}, if the specified
     * type descriptor is not a <code>java.lang.Class</code> instance. 
     * @param typeDesc the type description
     * @return a JavaType instance for the specified type.
     * @exception ModelFatalException the specified type description is not
     * a <code>java.lang.Class</code> instance.
     */
    public JavaType getJavaType(Object typeDesc)
    {
        if (typeDesc == null)
            return null;

        try {
            Class clazz = (Class)typeDesc;
            ClassLoader classLoader = getClassLoaderPrivileged(clazz);
            return getJavaModel(classLoader).getJavaType(clazz);
        }
        catch (ClassCastException ex) {
            throw new ModelFatalException(msg.msg("EXC_InvalidTypeDesc", //NOI18N
                typeDesc.getClass().getName()));
        }
    }

    // ===== Methods not defined in JavaModelFactory =====

    /**
     * Returns the <code>java.lang.Class</code> wrapped in the specified 
     * JavaType. 
     * @return the <code>java.lang.Class</code> for the specified
     * JavaType. 
     * @exception ModelFatalException the specified JavaType does
     * not wrap a <code>java.lang.Class</code> instance.
     */
    public Class getJavaClass(JavaType javaType) 
    {
        if (javaType == null)
            return null;
        
        try {
            return ((BaseReflectionJavaType)javaType).getJavaClass();
        }
        catch (ClassCastException ex) {
            throw new ModelFatalException(msg.msg(
                "EXC_InvalidJavaType", javaType.getClass())); //NOI18N
        }
    }

    //========= Internal helper methods ==========
    
    /**
     * Sets the JDOModel instance for the specified JavaModel.
     * @param javaModel the JavaModel
     */
    protected void setJDOModelInternal(JavaModel javaModel)
    {
        JDOModelFactory factory = JDOModelFactoryImplCaching.getInstance();
        JDOModel jdoModel = factory.getJDOModel(javaModel);
        // update the JDOModel property of the JavaModel
        try {
            javaModel.setJDOModel(jdoModel);
        }
        catch (ModelException ex) {
            throw new ModelFatalException(
                msg.msg("ERR_CannotSetJDOModel"), ex); //NOI18N
        }
    }
}

